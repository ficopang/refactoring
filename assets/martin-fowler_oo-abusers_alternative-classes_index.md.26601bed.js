import{_ as o,c as r,b as s,d as a,e as n,w as l,a as t,r as p,o as i}from"./app.e4ecf616.js";const x=JSON.parse('{"title":"Alternative Classes with Different Interfaces","description":"","frontmatter":{},"headers":[{"level":2,"title":"Penjelasan Smell","slug":"penjelasan-smell","link":"#penjelasan-smell","children":[]},{"level":2,"title":"Penyelesaian","slug":"penyelesaian","link":"#penyelesaian","children":[]}],"relativePath":"martin-fowler/oo-abusers/alternative-classes/index.md"}'),c={name:"martin-fowler/oo-abusers/alternative-classes/index.md"},d=t('<h1 id="alternative-classes-with-different-interfaces" tabindex="-1">Alternative Classes with Different Interfaces <a class="header-anchor" href="#alternative-classes-with-different-interfaces" aria-hidden="true">#</a></h1><p><a href="https://sourcemaking.com/refactoring/smells/alternative-classes-with-different-interfaces" target="_blank" rel="noreferrer">sourcemaking</a></p><h2 id="penjelasan-smell" tabindex="-1">Penjelasan Smell <a class="header-anchor" href="#penjelasan-smell" aria-hidden="true">#</a></h2><p>Ada beberapa class yang memiliki fungsi yang sama, namun tidak datang dari interface atau abstract class.</p><p>Kesamaan fungsi yang dimaksud adalah fungsi memiliki tujuan yang sama. Namun bisa saja memiliki nama yang berbeda, atau bisa juga memiliki parameter yang serupa namun beda urutan, atau ada parameter yang satuan, ada yang berupa objek (<a href="https://sourcemaking.com/refactoring/preserve-whole-object" target="_blank" rel="noreferrer">Preserve whole object</a>).</p><p>Hal ini bisa terjadi bisa karena class-class tersebut dikerjakan oleh programmer yang berbeda. Sehingga antar programmer tidak sadar ada yang bisa dibuatkan interface diantara code mereka berdua.</p><p>Atau bisa karena tidak mengikuti prinsip DIP (<a href="https://en.wikipedia.org/wiki/Dependency_inversion_principle" target="_blank" rel="noreferrer">Dependency Inversion Principle</a>).</p>',7),_=s("code",null,"paint",-1),y=t(`<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ghost</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">paint</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Graphics2D</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">//draw Ghost pixel from spritesheet</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,1),u=s("code",null,"draw",-1),A=t(`<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PacMan</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">draw</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Graphics2D</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">//draw PacMan pixel from spritesheet</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="penyelesaian" tabindex="-1">Penyelesaian <a class="header-anchor" href="#penyelesaian" aria-hidden="true">#</a></h2>`,2),C=s("a",{href:"https://sourcemaking.com/refactoring/extract-superclass",target:"_blank",rel:"noreferrer"},"Extract Superclass",-1),h=t(`<div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Drawable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">draw</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Graphics2D</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,1),m=s("code",null,"draw",-1),D=s("code",null,"paint",-1),g=s("code",null,"draw",-1),f=s("code",null,"Drawable",-1),b=s("a",{href:"https://sourcemaking.com/refactoring/rename-method",target:"_blank",rel:"noreferrer"},"Rename Method",-1),k=s("code",null,"paint",-1);function F(v,j,T,w,E,P){const e=p("github-url");return i(),r("div",null,[d,s("p",null,[a("Contohnya, class "),n(e,{to:"before/Ghost.java"},{default:l(()=>[a("Ghost.java")]),_:1}),a(" memiliki fungsi "),_,a(" yang bertujuan menggambar Ghost dari spritesheet yang tersedia.")]),y,s("p",null,[a("Di sisi lain, class "),n(e,{to:"before/PacMan.java"},{default:l(()=>[a("PacMan.java")]),_:1}),a(" memiliki fungsi "),u,a(" yang bertujuan sama. Menggambar PacMan dari spritesheet yang tersedia.")]),A,s("p",null,[a("Untuk contoh kasus ini, kita melakukan "),C,a(". Kita membuat interface "),n(e,{to:"after/Drawable.java"},{default:l(()=>[a("Drawable.java")]),_:1}),a(" yang akan di-implement oleh kedua class.")]),h,s("p",null,[a("Pada class PacMan sebelumnya, nama fungsi adalah "),m,a(", sedangkan pada Ghost nama fungsi adalah "),D,a(". Dipilih salah satu dari kedua sinonim tersebut yang akan dipakai. Misal diputuskan "),g,a(" yang dipakai sebagai nama method di interface "),f,a(", maka dilakukan "),b,a(" pada fungsi "),k,a(" di "),n(e,{to:"after/Ghost.java"},{default:l(()=>[a("Ghost.java")]),_:1}),a(".")])])}const I=o(c,[["render",F]]);export{x as __pageData,I as default};
